Index: package/network/utils/iwinfo/src/iwinfo_wext.c
===================================================================
--- package/network/utils/iwinfo/src/iwinfo_wext.c	(revision 34031)
+++ package/network/utils/iwinfo/src/iwinfo_wext.c	(working copy)
@@ -241,6 +241,14 @@
 		return 0;
 	}
 
+	/* nl80211 wext compat requires the query specify dBm */
+	wrq.u.txpower.flags = IW_TXPOW_DBM;
+	if(wext_ioctl(ifname, SIOCGIWTXPOW, &wrq) >= 0)
+	{
+		*buf = wrq.u.txpower.value;
+		return 0;
+	}
+
 	return -1;
 }
 
Index: package/network/utils/iwinfo/src/iwinfo_nl80211.c
===================================================================
--- package/network/utils/iwinfo/src/iwinfo_nl80211.c	(revision 34031)
+++ package/network/utils/iwinfo/src/iwinfo_nl80211.c	(working copy)
@@ -725,16 +725,15 @@
 {
 	char *ssid;
 
-	if (!wext_get_ssid(ifname, buf))
-	{
-		return 0;
-	}
-	else if ((ssid = nl80211_hostapd_info(ifname)) &&
+	if ((ssid = nl80211_hostapd_info(ifname)) &&
 	         (ssid = nl80211_getval(ifname, ssid, "ssid")))
 	{
 		memcpy(buf, ssid, strlen(ssid));
 		return 0;
 	}
+	
+	if (!wext_get_ssid(ifname, buf))
+		return 0;
 
 	return -1;
 }
@@ -744,11 +743,7 @@
 	char *bssid;
 	unsigned char mac[6];
 
-	if (!wext_get_bssid(ifname, buf))
-	{
-		return 0;
-	}
-	else if ((bssid = nl80211_hostapd_info(ifname)) &&
+	if ((bssid = nl80211_hostapd_info(ifname)) &&
 	         (bssid = nl80211_getval(ifname, bssid, "bssid")))
 	{
 		mac[0] = strtol(&bssid[0],  NULL, 16);
@@ -763,6 +758,9 @@
 
 		return 0;
 	}
+	
+	if (!wext_get_bssid(ifname, buf))
+		return 0;
 
 	return -1;
 }
@@ -931,9 +929,6 @@
 {
 	struct nl80211_rssi_rate rr;
 
-	if (!wext_get_bitrate(ifname, buf))
-		return 0;
-
 	nl80211_fill_signal(ifname, &rr);
 
 	if (rr.rate)
@@ -941,6 +936,9 @@
 		*buf = (rr.rate * 100);
 		return 0;
 	}
+	
+	if (!wext_get_bitrate(ifname, buf))
+		return 0;
 
 	return -1;
 }
@@ -949,9 +947,6 @@
 {
 	struct nl80211_rssi_rate rr;
 
-	if (!wext_get_signal(ifname, buf))
-		return 0;
-
 	nl80211_fill_signal(ifname, &rr);
 
 	if (rr.rssi)
@@ -959,6 +954,9 @@
 		*buf = rr.rssi;
 		return 0;
 	}
+	
+	if (!wext_get_signal(ifname, buf))
+		return 0;
 
 	return -1;
 }
@@ -1018,35 +1016,35 @@
 {
 	int signal;
 
-	if (wext_get_quality(ifname, buf))
+	if (!nl80211_get_signal(ifname, &signal))
 	{
-		*buf = 0;
+		/* A positive signal level is usually just a quality
+		 * value, pass through as-is */
+		if (signal >= 0)
+		{
+			*buf = signal;
+		}
 
-		if (!nl80211_get_signal(ifname, &signal))
+		/* The cfg80211 wext compat layer assumes a signal range
+		 * of -110 dBm to -40 dBm, the quality value is derived
+		 * by adding 110 to the signal level */
+		else
 		{
-			/* A positive signal level is usually just a quality
-			 * value, pass through as-is */
-			if (signal >= 0)
-			{
-				*buf = signal;
-			}
+			if (signal < -110)
+				signal = -110;
+			else if (signal > -40)
+				signal = -40;
 
-			/* The cfg80211 wext compat layer assumes a signal range
-			 * of -110 dBm to -40 dBm, the quality value is derived
-			 * by adding 110 to the signal level */
-			else
-			{
-				if (signal < -110)
-					signal = -110;
-				else if (signal > -40)
-					signal = -40;
-
-				*buf = (signal + 110);
-			}
+			*buf = (signal + 110);
 		}
+		return 0;
 	}
 
-	return 0;
+	if (!wext_get_quality(ifname, buf))
+		return 0;
+
+	*buf = 0;
+	return -1;
 }
 
 int nl80211_get_quality_max(const char *ifname, int *buf)
