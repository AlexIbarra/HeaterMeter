#!/bin/sh

FUNC=`basename $0`

[ $# -eq 0 ] && {
cat <<EOF
Usage: $FUNC [-s SSID] [-p password] [-c channel] [-e encryption] [-m mode]
       encryption = none wep psk psk2 (default)
       mode = ap sta
EOF
  exit 1
}

ENC=psk2
MODE=sta
[ "$FUNC" = "wifi-client" ] && MODE="sta" && TAG="wifi_client"
[ "$FUNC" = "wifi-ap" ] && MODE="ap" && TAG="wifi_ap"

while getopts "s:p:c:e:m:" arg ; do
  case $arg in
    s) SSID=$OPTARG ;;
    p) PASS=$OPTARG ;;
    c) CHANNEL=$OPTARG ;;
    e) ENC=$OPTARG ;;
    m) MODE=$OPTARG ;;
  esac
done

shift $((OPTIND-1))
[ $# -gt 0 ] && SSID=$1
[ $# -gt 1 ] && PASS=$2

SSID=`echo $SSID | sed "s/\'/\\\\\'/g"`
PASS=`echo $PASS | sed "s/\'/\\\\\'/g"`
[ -n "$PASS" ] && PASS="	option key '$PASS'"
[ "$MODE" == "ap" -a -z "$CHANNEL" ] && CHANNEL="6"
[ -n "$CHANNEL" ] && CHANNEL="	option channel '$CHANNEL'"

# On platforms with just one network connection (PiA, Zero, ZeroW) the plarform will assign the wifi to the
# lan interface. In that case, do not create a new interface, just write to the lan interface definition
IFACE="wwan"
[ "$(uci -q get network.lan.ifname)" = "wlan0" ] && IFACE="lan"

cat > /etc/config/wireless << EOF
config wifi-device 'radio0'
	option type 'mac80211'
	option phy 'phy0'
	option hwmode '11ng'
	#option htmode 'HT20'
	#list ht_capab 'SHORT-GI-20'
	#list ht_capab 'SHORT-GI-40'
	#list ht_capab 'DSSS_CCK-40'
	#list ht_capab 'RX-STBC1'
	#option country '00'
$CHANNEL	

config wifi-iface '$TAG'
	option device 'radio0'
	option network '$IFACE'
	option mode '$MODE'
	option ssid '$SSID'
	option encryption '$ENC'
$PASS
EOF

uci set network.$IFACE=interface
uci set dhcp.$IFACE=dhcp
uci set dhcp.$IFACE.interface=$IFACE
# delete 'bridge' type, if the connection is already brought up as a bridge then this may require a reboot
uci -q delete network.$IFACE.type
if [ "$MODE" = "sta" ] ; then
  uci set dhcp.$IFACE.ignore=1
  uci set dhcp.$IFACE.dhcpv6=disabled
  uci set dhcp.$IFACE.ra=disabled
  uci set network.$IFACE.proto=dhcp
  uci -q delete network.$IFACE.ipaddr
  uci -q delete network.$IFACE.netmask
else
  uci set dhcp.$IFACE.ignore=0
  uci set dhcp.$IFACE.dhcpv6=server
  uci set dhcp.$IFACE.ra=server
  uci set network.$IFACE.proto=static
  #uci -q get network.$IFACE.ipaddr > /dev/null || {
    uci set network.$IFACE.ipaddr=192.168.201.1
    uci set network.$IFACE.netmask=255.255.255.0
  #}
fi
uci commit
sync
