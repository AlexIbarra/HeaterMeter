<%
  local rrd = luci.http.formvalue("rrd")
  require "lmclient"
%>
<!doctype html public "-//W3C//DTD HTML 4.0//EN">
<html>
<head>
<link rel="icon" type="image/x-icon" href="<%=resource%>/favicon.ico">
<title>HeaterMeter BBQ Control</title>
<script language="javascript" src="<%=resource%>/js/jquery.min.js" type="text/javascript"></script>
<script language="javascript" src="<%=resource%>/js/jquery.jeditable.mini.js" type="text/javascript"></script>
<!--[if lte IE 8]><script language="javascript" type="text/javascript" src="<%=resource%>/js/excanvas.min.js"></script><![endif]-->
<script language="javascript" type="text/javascript" src="<%=resource%>/js/jquery.flot.min.js"></script>
<script language="javascript" type="text/javascript" src="<%=resource%>/js/jquery.flot.selection.min.js"></script>
<script language="javascript" type="text/javascript">
var lastUpdateUtc;
var lastPlot;
var lastOverviewPlot;

// mapJson translates the json temps array index to graphData index
var mapJson = [6,5,4,3];
var graphLoaded = false;
var graphData =  [
        { label: "", color: "#6cf", lines: { lineWidth: 1, fill: true }, shadowSize: 0, yaxis: 2, data: [] },  // fanspeed
        { label: "", color: "#fd9", lines: { lineWidth: 1, fill: true }, shadowSize: 0, yaxis: 2, data: [] },  // lidopen
        { label: "Set", color: "rgba(255,0,0,0.8)", lines: { lineWidth: 1 }, shadowSize: 0, data: [] },
        { label: "Amb", color: "#789", lines: { show: true }, data: [] },
        { label: "Food2", color: "#297", lines: { show: true }, data: [] },
        { label: "Food1", color: "#6c3", lines: { show: true }, data: [] },
        { label: "Pit", color: "#e73", lines: { lineWidth: 3 }, data: [] }
    ];

    var graphOpts = {
        legend: { show: false },
        series: {
            lines: { show: true, lineWidth: 2 },
            points: { show: false, symbol: "circle", radius: 1, fill: false },
            shadowSize: 4
        },
        xaxis: { show: true, mode: "time", color: "#ccc" },
        yaxis: { show: true, ticks: 10, color: "#ccc" },
        yaxes: [ { }, { position: "right", min: 0, max: 100 } ],
        grid: { clickable: true, hoverable: true }
    };
    var graphOpts2 = {
        legend: { show: false },
        series: {
            lines: { show: true, lineWidth: 1 },
            points: { show: false },
            shadowSize: 0
        },
        xaxis: { show: true, mode: "time", color: "#ccc" },
        yaxis: { show: false },
        yaxes: [ { }, { min: 0, max: 100 } ],
        grid: { clickable: false },
        selection: { mode: "x" }
    };
    var tzOffset = new Date().getTimezoneOffset() * -60000;

$(document).ready(function()
{
    graphOpts.legend.container = $("#graph_legend");
    $("#graph_overview").bind("plotselected", overviewSelected);
    $("#graph_overview").bind("plotunselected", overviewUnselected);
    $("#showfan").click(showFanChanged);
    $("#graphtt").click(function (){ $(this).fadeOut(); });
    $("#rangeselect").change(refreshGraphData);
    $("#graph").bind("plotclick", graphClicked);
    $("#graph").bind("plothover", graphHover);
    $("div.legfill").click(legendClicked);

    // Set colors of probe readings to match the graph colors
    for (var srs=0; srs<4; ++srs)
        $("#temp" + srs).css("text-shadow", "2px 2px 1px " + graphData[mapJson[srs]].color);
    for (var srs=1; srs<4; ++srs)
        $("#pl" + srs).css("background", graphData[mapJson[srs]].color);

<% if luci.dispatcher.context.authuser == "root" then %>
    $(".pname").editable(function(value, settings) {
        return(nameChanged(this.id, value));
    }, {maxlength: 13});

    $("#set").editable(function(value, settings) {
        return(tempChanged(value));
    }, {style: "display: inline"});
<% end %>
<% if not rrd then %>
    var o = <%= LmClient():query("$LMSU") or "{}" %>;
    var now = +new Date();
    if ((now - 10000) < (o.time * 1000))
        connectionSuccess(o);
<% end %>
});

$(window).load(function ()
{
<% if not rrd then %>
    if (!lastUpdateUtc)
        JSONQuery();
    window.setInterval(JSONQuery, 10000);
<% end %>
    refreshGraphData();
});

function legendClicked()
{
    // The ID should be "pl?" so pull the json probe index off the end
    // and get the graphdata index
    var idx = mapJson[parseInt(this.id.substring(2))];
    graphData[idx].lines.show = !graphData[idx].lines.show;
    updateGraph();
}

function refreshGraphData()
{
    var range = $("#rangeselect").val();

    $("#graphtt").fadeOut();
    $("#rangeselect").attr("disabled", true);
    $("#loadindic").show();
    graphLoaded = false;

    jQuery.each(graphData, function() {
        this.data = [];
    });
<% 
  local url = luci.dispatcher.build_url("lm", "hist") .. "?"
  if rrd then url = url .. "rrd=" .. rrd .. "&" end
  url = url .. "nancnt="
%>
    jQuery.ajax({
        type: "GET",
        url: "<%=url%>" + range,
        dataType: "text",
        success: tstatSuccess,
        error: clearLoadingIndic
    });
}

function clearLoadingIndic()
{
    $("#loadindic").hide();
    $("#rangeselect").removeAttr("disabled");
}

function showFanChanged()
{
    if ($("#showfan").attr("checked"))
    {
        graphData[0].lines.show = true;
        graphData[1].lines.show = true;
    }
    else
    {
        graphData[0].lines.show = false;
        graphData[1].lines.show = false;
    }
    updateGraph();
}

function updateGraphRanges(from, to)
{
    $("#graphtt").fadeOut();
    graphOpts.xaxis.min = from;
    graphOpts.xaxis.max = to;
    $.plot($("#graph"), graphData, graphOpts);
}

function overviewSelected(event, ranges)
{
    updateGraphRanges(ranges.xaxis.from, ranges.xaxis.to);
}

function overviewUnselected()
{
    updateGraphRanges(null, null);
}

function formatTime(date, includeSeconds)
{
    if (includeSeconds)
        return $.plot.formatDate(date, "%h:%M:%S %P");
    else
        return $.plot.formatDate(date, "%h:%M %P");
}

function formatDate(date)
{
    return $.plot.formatDate(date, "%y %b %d, %h:%M %P");
}

function formatTimer(secs, includeSeconds)
{
    var hours = Math.floor(secs / 3600);
    secs -= hours * 3600;
    var mins = Math.floor(secs / 60);
    secs -= mins * 60;

    var retVal = "";
    if (hours > 0)
        retVal = hours + "h";
    if (mins > 0)
        retVal += mins + "m";
    if (includeSeconds && secs > 0)
        retVal += secs + "s";

    return retVal;
}

function lerp(n1, n2, frac)
{
    return (n1 * (1.0 - frac)) + (n2 * frac);
}

var lastHover = 0;
function graphHover(event, pos, item)
{
    var now = +new Date();
    if (now - lastHover > 100)
    {
        graphClicked(event, pos, item); 
        lastHover = now;
    }
}

function graphClicked(event, pos, item)
{
    var sInfo = "";
    var srsClosestY = -1;
    var srsClosestYIdx;
    for (var srs=0; srs<graphData.length; ++srs)
    {
        // Skip the lid series
        if (srs == 1)
            continue;
            
        var val = NaN;
        var firstPastIdx = -1;
        var srsData = graphData[srs].data;
        
        for (var i=0; i<srsData.length; ++i)
        {
            if (pos.x <= srsData[i][0]  && !isNaN(srsData[i][1]))
            {
                firstPastIdx = i;
                break;
            }
        }
        
        if (firstPastIdx == -1)
            continue;
                
        // This must either be the point at the same timestamp as where you 
        // clicked or you must click between two points.  If you click off to 
        // the left of the first point or to the right of the last, we don't 
        // use that value because you've clicked outside the range of valid data. 
        var ptR = srsData[firstPastIdx];
        if (item && item.datapoint[0] == ptR[0])
            val = ptR[1];
        else if (firstPastIdx != 0)
        {
            var ptL = srsData[firstPastIdx-1];
            var timeDiff = ptR[0] - ptL[0];
            val = lerp(ptL[1], ptR[1], (pos.x - ptL[0]) / timeDiff);
        }
            
        if (!isNaN(val))
            if (srs == 0)
            {
                if (val >= 0)
                    sInfo = sInfo + "Fan " + Math.round(val) + "%<br />";
            }
            else 
            {
                sInfo = sInfo + graphData[srs].label + " " + val.toFixed(1) + "&deg;<br />";

                // Save the series with the closest Y point to where the mouse is 
                if (srsClosestY == -1 ||
                    Math.abs(srsData[firstPastIdx][1] - pos.y) < 
                    Math.abs(graphData[srsClosestY].data[srsClosestYIdx][1] - pos.y))
                {
                    srsClosestY = srs;
                    srsClosestYIdx = firstPastIdx;
                }
            }
                  
    }  /* for srs */
    
    if (sInfo == "")
        $("#graphtt").fadeOut();
    else
    {
        if (srsClosestY != -1)
        {
            var axisY = lastPlot.getYAxes()[0];
            var valY = graphData[srsClosestY].data[srsClosestYIdx][1];
            pos.pageY = axisY.p2c(valY) + 
                lastPlot.offset().top + lastPlot.getPlotOffset().top;
        }
        
        var d = new Date(pos.x);
        $("#graphtt_title").html(formatTime(d, false));
        $("#graphtt_content").html(sInfo);
        var ttWidth = $("#graphtt").outerWidth();
        var ttHeight = $("#graphtt").outerHeight();
        $("#graphtt_arrow").css({left: ttWidth/2 - 7, top: ttHeight - 1});
        $("#graphtt")
            .css({left: pos.pageX - (ttWidth/2) - 1, top: pos.pageY - ttHeight - 15})
            .show();
    }
}

function addGraphPoint(d, time, temp)
{
    // if the last two points have the same value as the
    // new point just update the time on the last point
    if (d.length > 1)
    {
        var p1 = d[d.length-2];
        var p2 = d[d.length-1];
        if (p1[1] == temp && p2[1] == temp)
        {
            p2[0] = time;
            return;
        }
    }
    // The RRD may start with a ton of NaN, don't put them into the graph
    // because otherwise it makes a blank space until the first real value
    else if (d.length == 0 && isNaN(temp))
        return;

    d.push([time, temp]);
}

function updateGraph()
{
    // we want to save the selected area, and if the selection is to the
    // end of the graph, extend it to include the new point
    var selectedArea;
    var extendSelection = false;

    if (lastOverviewPlot)
        selectedArea = lastOverviewPlot.getSelection();
    if (selectedArea && selectedArea.xaxis.to == lastOverviewPlot.getAxes().xaxis.max)
        extendSelection = true;
        
    lastOverviewPlot = $.plot($("#graph_overview"), graphData, graphOpts2);
    
    if (extendSelection)
        selectedArea.xaxis.to = lastOverviewPlot.getAxes().xaxis.max;
    if (selectedArea)
        lastOverviewPlot.setSelection(selectedArea, !extendSelection);

    // if we extended selection then it would have been redrawn by the event
    if (!extendSelection)
        lastPlot = $.plot($("#graph"), graphData, graphOpts);
}

function addFanGraphPoint(time, value)
{
    if (isNaN(value))
        return;
        
    if (value < 0)
    {
        addGraphPoint(graphData[0].data, time, 0);
        addGraphPoint(graphData[1].data, time, 100);
    } 
    else 
    {
        addGraphPoint(graphData[0].data, time, value);
        addGraphPoint(graphData[1].data, time, -1);
    }
}

function tstatSuccess(csv)
{
    // mapCsv translates csv field index to graphData index
    // a graphData index of -1 means not to map it
    var mapCsv = [-1,2,6,5,4,3,0];
    
    clearLoadingIndic();
    jQuery.each(csv.split('\n'), function (){
        if (this == "") return;
        var line = this.split(",");
        if (line.length != mapCsv.length) return;
        line[0] = line[0] * 1000 + tzOffset;
        for (var valIdx=1; valIdx<line.length; ++valIdx)
        {
            var dest = mapCsv[valIdx];
            if (dest < 0)
                continue;
            var value = parseFloat(line[valIdx]);
            if (dest == 0)
                addFanGraphPoint(line[0], value);
            else    
                addGraphPoint(graphData[dest].data, line[0], value);
        }
    });
    graphLoaded = true;
    updateProbeEstimates();
    updateGraph();
}

function nameChanged(from, value)
{
    $.get("<%=luci.dispatcher.build_url("lm", "set")%>?" + from + "=" + value);
    return value;
}

function tempChanged(value)
{
    if(((value - 0) == value && value.length > 0) && value > 0 && value < 999)
    {
        $.get("<%=luci.dispatcher.build_url("lm", "set")%>?sp=" + value);
        return value;
    }
    else return "err";
}

function JSONQuery()
{
    if($(document).has('form').length == 0)
    {
        jQuery.ajax(
        {
            type: "GET",
            url: "<%=luci.dispatcher.build_url("lm", "hmstatus")%>",
            dataType: "json",
            timeout: 5000,
            success: connectionSuccess,
            error: connectionFailure
        });
    }
}

/* find out how many points we have on the graph and
requery the server for an updated consolidation
if we have too much data */
function checkRefreshGraphOrUpdate()
{
    if (!graphLoaded)
        return;

    var max = 0;
    jQuery.each(graphData, function () {
        if (this.data.length > max)
            max = this.data.length;
    });

    // the RRD holds up to 480 points and the graph holds
    // less due to point consolidation, so best case
    // scenario 24pts * 10sec per poll = 4mins
    if (max > 504)
        refreshGraphData()
    else
        updateGraph();
}

function connectionSuccess(o)
{
    lastUpdateUtc = o.time * 1000;
    o.time = lastUpdateUtc + tzOffset;
    $("#set").html(o.set);

    if (graphLoaded)
    {
        addFanGraphPoint(o.time, o.lid > 0 ? -o.lid : o.fan.c);
        addGraphPoint(graphData[2].data, o.time, o.set);
    }

    for(var i = 0; i < 4; i++)
    {
        $("#pn" + i).text(o.temps[i].n);
        var val = o.temps[i].c;
        if (val === null)
        {
            val = NaN;
            $("#temp" + i).text("off");
        }
        else
            $("#temp" + i).html(val.toFixed(1) + "&deg;");
        
        var dataIdx = mapJson[i];
        graphData[dataIdx].label = o.temps[i].n;
        if (graphLoaded)
            addGraphPoint(graphData[dataIdx].data, o.time, val);

        var rfsDiv = "#rfs" + i;
        if (typeof o.temps[i].rf !== "undefined")
        {
            var rf = o.temps[i].rf;
            var img, detals;
            if (rf == null)
            {
              img = "rf0.png";
              details = "offline";
            }
            else 
            {
                if (rf.s == 255)
                    img = "rf3.png";
                else if (rf.s >= 127)
                    img = "rf2.png";
                else
                    img = "rf1.png";
                details = (rf.s/2.55).toFixed(0) + "% ";
                details += (rf.b / 1000.0).toFixed(2) + "V"
            }

             $(rfsDiv).html('<img src="<%=resource%>/' + img + '" title="' + 
               details + '">')
               .show();
        }
        else
          $(rfsDiv).hide();
    }
    $("#fana").animate({left: o.fan.a + "%"});
    $("#fanc").animate({width: o.fan.c + "%"});
    $("#fanl").html("Blower Speed " + o.fan.c + "%");
    if (o.lid == 0)
        $("#lid").hide();
    else
        $("#lid").html("Lid Open " + formatTimer(o.lid, true)).show();

    updateTime(o.time);
    updateProbeEstimates();
    checkRefreshGraphOrUpdate();
}

//either the request timed out or something else happened
function connectionFailure()
{
    updateTime(null);
}

//update the "last updated" time
function updateTime(time)
{
    var color = "#bbb";
    var date;
    if(!time)
    {
        color = "#f33";
        date = new Date(+new Date() + tzOffset);
    }
    else
        date = new Date(time);

    $("#updatedtime")
    .html(formatTime(date, true))
    .css("color", color)
    .attr("title", formatDate(date));
}

function degPerHour(probeIdx)
{
    var pname = "#dph" + probeIdx; 
    var data = graphData[mapJson[probeIdx]].data;
    if (data.length != 0 && !isNaN(data[data.length-1][1]))
    {
        var val = data[data.length-1][1];
       
        var time = data[data.length-1][0];
        // Target is 59mins30secs ago, allows drawing with scale set to 1hr
        var targetTime = time - (60 * 60 * 1000) + 30000;
        for (var i=data.length-1; i>=0; --i)
            if (data[i][0] <= targetTime && !isNaN(data[i][1]))
            {
                var diffTemp = val - data[i][1];
                var diffTime = time - data[i][0];
                diffTime /= (60.0 * 60.0 * 1000.0);
                var dph = diffTemp / diffTime;
                // Don't display if there isn't clear increase, prevents wild numbers
                if (dph < 1.0)
                    break;
                var timeRemain180 = ((180.0 - val) / dph) * 3600;
                timeRemain180 = (timeRemain180 > 0) ? formatTimer(timeRemain180, false) + " to 180&deg;<br />" : "";
                var timeRemain200 = ((200.0 - val) / dph) * 3600;
                timeRemain200 = (timeRemain200 > 0) ? formatTimer(timeRemain200, false) + " to 200&deg;" : "";
                $(pname).html(diffTemp.toFixed(1) + "&deg;/hr<br />" + timeRemain180 + timeRemain200).show();
                return;
            }
    }  /* if has valid data */
    $(pname).hide();
}

function updateProbeEstimates()
{
    for (var i=1; i<4; ++i)
        degPerHour(i);
}

</script>

<style type="text/css">
body { font: normal 13px Arial, sans-serif; background: #f3f1e9; text-align: center; margin: 0; padding: 0; }
h2 { color: #bbb; }
div.content { background: #246; border: 1px solid #467; }
table.probelist { width: 100%; background: #8ab; background: rgba(99, 162, 230, 0.5); border: 1px solid #235; padding: 0; }
td.probe { width: 33%; }
div.legbord { border: 1px solid #ccc; padding: 1px; display: inline-block; }
div.legfill { width: 14px; height: 14px; }
div.dph { color: #003; font-size: 10pt; text-align: right; position: absolute; right: 0; bottom: 0; }
div.pname { color: #003; font-size: 18pt; line-height: 16pt; display: inline-block; }
div.ptemp { font-size: 32pt; line-height: 26pt; color: #fff; }
div#graphtt { display: none; position: absolute; border: 1px solid #89c; background: #eef; opacity: 0.9; padding: 2px; color: #003; }
div#graphtt_title { color: #fff; border: 1px solid #008; background-color: #357; }
div.rfstatus { display: none; position: absolute; left: 0; bottom: 0; }
</style>
</head>

<body>
<div style="background: #000; padding: 10px;">
    <div class="content">
<% if rrd then %>
      <h2><%=rrd%></h2>
<% else %>
      <div style="font-family: Trebuchet MS; background: #000 url('<%=resource%>/fire.png') repeat-x scroll left bottom;"><div style="background: rgba(76,135,199,0.5);">
        <div style="color: #bbb; font-size: 28pt;">Current Pit</div>
        <div id="updatedtime" style="position: absolute; top: 8px; right: 13px; color: #bbb; font-size: 12pt;">00:00:00 AM</div>
        <div id="lid" style="position: absolute; top: 8px; left: 13px; color: #fc3; font-size: 12pt;"></div>
        <div style="font-size: 120pt; line-height: 100pt; color: #fff; position: relative;">
          <span id="temp0">---</span>
          <div style="font-size: 22pt; line-height: 22pt; position: absolute; bottom: 0; right:0;">Set
            <span id="set">---</span>&deg;
          </div>
        </div>

        <div style="background: #357; border: 1px solid #777; height: 20px; position: relative;">
            <div id="fanc" style="position: absolute; left: 0; top: 3px; z-index: 0; background: #0ad; width: 0%; height: 14px; border-top-right-radius: 4px; border-bottom-right-radius: 4px;"></div>
            <div id="fanl" style="position: absolute; left: 0; top: 1px; z-index: 1; color: #003; font-size: 10pt;"></div>
            <div id="fana" style="position: absolute; left: 0; top: 0; z-index: 2; width: 3px; height: 20px; background: #fe4; opacity: 0.5;"></div>
        </div>

        <table class="probelist"><tr>
            <td class="probe" style="border-right: 1px solid #235;">
              <div style="position: relative;">
                    <div class="dph" id="dph1"></div>
                    <div class="rfstatus" id="rfs1"></div>
                    <div class="legbord"><div class="legfill" id="pl1"></div></div>
                    <div class="pname" id="pn1">-</div>
                    <div class="ptemp" id="temp1">-</div>
               </div>
            </td>
            <td class="probe">
              <div style="position: relative;">
                    <div class="dph" id="dph2"></div>
                    <div class="rfstatus" id="rfs2"></div>
                    <div class="legbord"><div class="legfill" id="pl2"></div></div>
                    <div class="pname" id="pn2">-</div>
                    <div class="ptemp" id="temp2">-</div>
               </div>
            </td>
            <td class="probe" style="border-left: 1px solid #235;">
              <div style="position: relative;">
                    <div class="dph" id="dph3"></div>
                    <div class="rfstatus" id="rfs3"></div>
                    <div class="legbord"><div class="legfill" id="pl3"></div></div>
                    <div class="pname" id="pn3">-</div>
                    <div class="ptemp" id="temp3">-</div>
               </div>
            </td>
        </tr></table>
      </div></div>
<% end %>
      <div style="position: relative;">
        <div id="graph" style="height: 350px; width: 700px; margin: 8px auto 0px auto;"></div>
        <div id="graph_overview" style="height: 90px; width: 700px; margin-left: auto; margin-right: auto;"></div>
        <div id="loadindic" style="display: none; position: relative; top: -320px; z-index: 2;"><img src="<%=resource%>/loading.gif" style="width: 126px; height: 22px;"></div>
      </div>
    </div>
</div>
<div id="graph_opts" style="color: #000;">
    <input type="checkbox" id="showfan" checked="checked"/><label for="showfan">Show fan speed</label>
    <select id="rangeselect">
        <option value="" selected>Auto scale</option>
        <option value="460">1 hour</option>
        <option value="360">6 hours</option>
        <option value="240">12 hours</option>
        <option value="0">24 hours</option>
    </select>
</div>
<div id="graphtt">
    <div id="graphtt_title"></div>
    <div id="graphtt_content"></div>
    <img id="graphtt_arrow" src="<%=resource%>/ttarrow.png" style="position: absolute; left: 0; top: 0;">
</div>
<% 
if luci.dispatcher.context.authuser ~= "root" then 
  write("<a href=%q>Login</a> " % luci.dispatcher.build_url("lm", "login"))
end
write("<a href=%q>Configuration</a>" % luci.dispatcher.build_url("admin","lm"))
%>
</body>

</html>
